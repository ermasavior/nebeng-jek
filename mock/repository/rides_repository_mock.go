// Code generated by MockGen. DO NOT EDIT.
// Source: internal/rides/repository/type.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "nebeng-jek/internal/rides/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRidesRepository is a mock of RidesRepository interface.
type MockRidesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRidesRepositoryMockRecorder
}

// MockRidesRepositoryMockRecorder is the mock recorder for MockRidesRepository.
type MockRidesRepositoryMockRecorder struct {
	mock *MockRidesRepository
}

// NewMockRidesRepository creates a new mock instance.
func NewMockRidesRepository(ctrl *gomock.Controller) *MockRidesRepository {
	mock := &MockRidesRepository{ctrl: ctrl}
	mock.recorder = &MockRidesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRidesRepository) EXPECT() *MockRidesRepositoryMockRecorder {
	return m.recorder
}

// AddAvailableDriver mocks base method.
func (m *MockRidesRepository) AddAvailableDriver(arg0 context.Context, arg1 string, arg2 model.Coordinate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAvailableDriver", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAvailableDriver indicates an expected call of AddAvailableDriver.
func (mr *MockRidesRepositoryMockRecorder) AddAvailableDriver(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAvailableDriver", reflect.TypeOf((*MockRidesRepository)(nil).AddAvailableDriver), arg0, arg1, arg2)
}

// RemoveAvailableDriver mocks base method.
func (m *MockRidesRepository) RemoveAvailableDriver(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAvailableDriver", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAvailableDriver indicates an expected call of RemoveAvailableDriver.
func (mr *MockRidesRepositoryMockRecorder) RemoveAvailableDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAvailableDriver", reflect.TypeOf((*MockRidesRepository)(nil).RemoveAvailableDriver), arg0, arg1)
}
