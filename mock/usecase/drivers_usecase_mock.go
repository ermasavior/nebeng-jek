// Code generated by MockGen. DO NOT EDIT.
// Source: internal/drivers/usecase/type.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	model "nebeng-jek/internal/drivers/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDriverUsecase is a mock of DriverUsecase interface.
type MockDriverUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockDriverUsecaseMockRecorder
}

// MockDriverUsecaseMockRecorder is the mock recorder for MockDriverUsecase.
type MockDriverUsecaseMockRecorder struct {
	mock *MockDriverUsecase
}

// NewMockDriverUsecase creates a new mock instance.
func NewMockDriverUsecase(ctrl *gomock.Controller) *MockDriverUsecase {
	mock := &MockDriverUsecase{ctrl: ctrl}
	mock.recorder = &MockDriverUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverUsecase) EXPECT() *MockDriverUsecaseMockRecorder {
	return m.recorder
}

// TrackUserLocation mocks base method.
func (m *MockDriverUsecase) TrackUserLocation(arg0 context.Context, arg1 model.TrackUserLocationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackUserLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackUserLocation indicates an expected call of TrackUserLocation.
func (mr *MockDriverUsecaseMockRecorder) TrackUserLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackUserLocation", reflect.TypeOf((*MockDriverUsecase)(nil).TrackUserLocation), arg0, arg1)
}
