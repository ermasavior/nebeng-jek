// Code generated by MockGen. DO NOT EDIT.
// Source: internal/rides/usecase/type.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	model "nebeng-jek/internal/rides/model"
	error "nebeng-jek/pkg/error"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRidesUsecase is a mock of RidesUsecase interface.
type MockRidesUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRidesUsecaseMockRecorder
}

// MockRidesUsecaseMockRecorder is the mock recorder for MockRidesUsecase.
type MockRidesUsecaseMockRecorder struct {
	mock *MockRidesUsecase
}

// NewMockRidesUsecase creates a new mock instance.
func NewMockRidesUsecase(ctrl *gomock.Controller) *MockRidesUsecase {
	mock := &MockRidesUsecase{ctrl: ctrl}
	mock.recorder = &MockRidesUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRidesUsecase) EXPECT() *MockRidesUsecaseMockRecorder {
	return m.recorder
}

// ConfirmPaymentDriver mocks base method.
func (m *MockRidesUsecase) ConfirmPaymentDriver(arg0 context.Context, arg1 model.ConfirmPaymentDriverRequest) (model.RideData, *error.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmPaymentDriver", arg0, arg1)
	ret0, _ := ret[0].(model.RideData)
	ret1, _ := ret[1].(*error.AppError)
	return ret0, ret1
}

// ConfirmPaymentDriver indicates an expected call of ConfirmPaymentDriver.
func (mr *MockRidesUsecaseMockRecorder) ConfirmPaymentDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmPaymentDriver", reflect.TypeOf((*MockRidesUsecase)(nil).ConfirmPaymentDriver), arg0, arg1)
}

// ConfirmRideDriver mocks base method.
func (m *MockRidesUsecase) ConfirmRideDriver(arg0 context.Context, arg1 model.ConfirmRideDriverRequest) *error.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmRideDriver", arg0, arg1)
	ret0, _ := ret[0].(*error.AppError)
	return ret0
}

// ConfirmRideDriver indicates an expected call of ConfirmRideDriver.
func (mr *MockRidesUsecaseMockRecorder) ConfirmRideDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmRideDriver", reflect.TypeOf((*MockRidesUsecase)(nil).ConfirmRideDriver), arg0, arg1)
}

// ConfirmRideRider mocks base method.
func (m *MockRidesUsecase) ConfirmRideRider(arg0 context.Context, arg1 model.ConfirmRideRiderRequest) *error.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmRideRider", arg0, arg1)
	ret0, _ := ret[0].(*error.AppError)
	return ret0
}

// ConfirmRideRider indicates an expected call of ConfirmRideRider.
func (mr *MockRidesUsecaseMockRecorder) ConfirmRideRider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmRideRider", reflect.TypeOf((*MockRidesUsecase)(nil).ConfirmRideRider), arg0, arg1)
}

// CreateNewRide mocks base method.
func (m *MockRidesUsecase) CreateNewRide(arg0 context.Context, arg1 model.CreateNewRideRequest) (int64, *error.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewRide", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*error.AppError)
	return ret0, ret1
}

// CreateNewRide indicates an expected call of CreateNewRide.
func (mr *MockRidesUsecaseMockRecorder) CreateNewRide(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewRide", reflect.TypeOf((*MockRidesUsecase)(nil).CreateNewRide), arg0, arg1)
}

// EndRideDriver mocks base method.
func (m *MockRidesUsecase) EndRideDriver(arg0 context.Context, arg1 model.EndRideDriverRequest) (model.RideData, *error.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndRideDriver", arg0, arg1)
	ret0, _ := ret[0].(model.RideData)
	ret1, _ := ret[1].(*error.AppError)
	return ret0, ret1
}

// EndRideDriver indicates an expected call of EndRideDriver.
func (mr *MockRidesUsecaseMockRecorder) EndRideDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndRideDriver", reflect.TypeOf((*MockRidesUsecase)(nil).EndRideDriver), arg0, arg1)
}

// SetDriverAvailability mocks base method.
func (m *MockRidesUsecase) SetDriverAvailability(arg0 context.Context, arg1 model.SetDriverAvailabilityRequest) *error.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDriverAvailability", arg0, arg1)
	ret0, _ := ret[0].(*error.AppError)
	return ret0
}

// SetDriverAvailability indicates an expected call of SetDriverAvailability.
func (mr *MockRidesUsecaseMockRecorder) SetDriverAvailability(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDriverAvailability", reflect.TypeOf((*MockRidesUsecase)(nil).SetDriverAvailability), arg0, arg1)
}

// StartRideDriver mocks base method.
func (m *MockRidesUsecase) StartRideDriver(arg0 context.Context, arg1 model.StartRideDriverRequest) (model.RideData, *error.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRideDriver", arg0, arg1)
	ret0, _ := ret[0].(model.RideData)
	ret1, _ := ret[1].(*error.AppError)
	return ret0, ret1
}

// StartRideDriver indicates an expected call of StartRideDriver.
func (mr *MockRidesUsecaseMockRecorder) StartRideDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRideDriver", reflect.TypeOf((*MockRidesUsecase)(nil).StartRideDriver), arg0, arg1)
}
