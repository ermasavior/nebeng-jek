// Code generated by MockGen. DO NOT EDIT.
// Source: internal/riders/usecase/type.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	model "nebeng-jek/internal/riders/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRiderUsecase is a mock of RiderUsecase interface.
type MockRiderUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRiderUsecaseMockRecorder
}

// MockRiderUsecaseMockRecorder is the mock recorder for MockRiderUsecase.
type MockRiderUsecaseMockRecorder struct {
	mock *MockRiderUsecase
}

// NewMockRiderUsecase creates a new mock instance.
func NewMockRiderUsecase(ctrl *gomock.Controller) *MockRiderUsecase {
	mock := &MockRiderUsecase{ctrl: ctrl}
	mock.recorder = &MockRiderUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRiderUsecase) EXPECT() *MockRiderUsecaseMockRecorder {
	return m.recorder
}

// TrackUserLocation mocks base method.
func (m *MockRiderUsecase) TrackUserLocation(arg0 context.Context, arg1 model.TrackUserLocationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackUserLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackUserLocation indicates an expected call of TrackUserLocation.
func (mr *MockRiderUsecaseMockRecorder) TrackUserLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackUserLocation", reflect.TypeOf((*MockRiderUsecase)(nil).TrackUserLocation), arg0, arg1)
}
