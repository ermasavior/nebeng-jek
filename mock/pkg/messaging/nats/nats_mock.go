// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/messaging/nats/type.go

// Package mock_nats is a generated GoMock package.
package mock_nats

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nats "github.com/nats-io/nats.go"
)

// MockNATSConnection is a mock of NATSConnection interface.
type MockNATSConnection struct {
	ctrl     *gomock.Controller
	recorder *MockNATSConnectionMockRecorder
}

// MockNATSConnectionMockRecorder is the mock recorder for MockNATSConnection.
type MockNATSConnectionMockRecorder struct {
	mock *MockNATSConnection
}

// NewMockNATSConnection creates a new mock instance.
func NewMockNATSConnection(ctrl *gomock.Controller) *MockNATSConnection {
	mock := &MockNATSConnection{ctrl: ctrl}
	mock.recorder = &MockNATSConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNATSConnection) EXPECT() *MockNATSConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockNATSConnection) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockNATSConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNATSConnection)(nil).Close))
}

// JetStream mocks base method.
func (m *MockNATSConnection) JetStream(opts ...nats.JSOpt) (nats.JetStreamContext, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JetStream", varargs...)
	ret0, _ := ret[0].(nats.JetStreamContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JetStream indicates an expected call of JetStream.
func (mr *MockNATSConnectionMockRecorder) JetStream(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JetStream", reflect.TypeOf((*MockNATSConnection)(nil).JetStream), opts...)
}

// MockJetStreamConnection is a mock of JetStreamConnection interface.
type MockJetStreamConnection struct {
	ctrl     *gomock.Controller
	recorder *MockJetStreamConnectionMockRecorder
}

// MockJetStreamConnectionMockRecorder is the mock recorder for MockJetStreamConnection.
type MockJetStreamConnectionMockRecorder struct {
	mock *MockJetStreamConnection
}

// NewMockJetStreamConnection creates a new mock instance.
func NewMockJetStreamConnection(ctrl *gomock.Controller) *MockJetStreamConnection {
	mock := &MockJetStreamConnection{ctrl: ctrl}
	mock.recorder = &MockJetStreamConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJetStreamConnection) EXPECT() *MockJetStreamConnectionMockRecorder {
	return m.recorder
}

// AddConsumer mocks base method.
func (m *MockJetStreamConnection) AddConsumer(stream string, cfg *nats.ConsumerConfig, opts ...nats.JSOpt) (*nats.ConsumerInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream, cfg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddConsumer", varargs...)
	ret0, _ := ret[0].(*nats.ConsumerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddConsumer indicates an expected call of AddConsumer.
func (mr *MockJetStreamConnectionMockRecorder) AddConsumer(stream, cfg interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream, cfg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConsumer", reflect.TypeOf((*MockJetStreamConnection)(nil).AddConsumer), varargs...)
}

// Publish mocks base method.
func (m *MockJetStreamConnection) Publish(subj string, data []byte, opts ...nats.PubOpt) (*nats.PubAck, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subj, data}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(*nats.PubAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockJetStreamConnectionMockRecorder) Publish(subj, data interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subj, data}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockJetStreamConnection)(nil).Publish), varargs...)
}

// PublishAsync mocks base method.
func (m *MockJetStreamConnection) PublishAsync(subj string, data []byte, opts ...nats.PubOpt) (nats.PubAckFuture, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subj, data}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishAsync", varargs...)
	ret0, _ := ret[0].(nats.PubAckFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishAsync indicates an expected call of PublishAsync.
func (mr *MockJetStreamConnectionMockRecorder) PublishAsync(subj, data interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subj, data}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsync", reflect.TypeOf((*MockJetStreamConnection)(nil).PublishAsync), varargs...)
}

// Subscribe mocks base method.
func (m *MockJetStreamConnection) Subscribe(subj string, cb nats.MsgHandler, opts ...nats.SubOpt) (*nats.Subscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subj, cb}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(*nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockJetStreamConnectionMockRecorder) Subscribe(subj, cb interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subj, cb}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockJetStreamConnection)(nil).Subscribe), varargs...)
}
