// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/websocket/type.go

// Package mock_websocket is a generated GoMock package.
package mock_websocket

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWebsocketInterface is a mock of WebsocketInterface interface.
type MockWebsocketInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketInterfaceMockRecorder
}

// MockWebsocketInterfaceMockRecorder is the mock recorder for MockWebsocketInterface.
type MockWebsocketInterfaceMockRecorder struct {
	mock *MockWebsocketInterface
}

// NewMockWebsocketInterface creates a new mock instance.
func NewMockWebsocketInterface(ctrl *gomock.Controller) *MockWebsocketInterface {
	mock := &MockWebsocketInterface{ctrl: ctrl}
	mock.recorder = &MockWebsocketInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketInterface) EXPECT() *MockWebsocketInterfaceMockRecorder {
	return m.recorder
}

// WriteMessage mocks base method.
func (m *MockWebsocketInterface) WriteMessage(messageType int, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", messageType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockWebsocketInterfaceMockRecorder) WriteMessage(messageType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockWebsocketInterface)(nil).WriteMessage), messageType, data)
}
