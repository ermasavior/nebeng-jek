name: Golang CI Script 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  golangci-lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6.1.1
        with:
          args: --timeout=10m
  test:
    name: Test with Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Install dependencies
        run: make tidy && make tidy-rides && make tidy-riders && make tidy-drivers
      - name: Run tests with coverage
        run: go test -coverprofile=coverage.out ./internal/...
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out
      - name: Check code coverage
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: $coverage%"
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "Code coverage below threshold!" && exit 1
          fi
  hadolint:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          recursive: true

  build-rides:
    name: Build Docker App (Rides)
    runs-on: ubuntu-latest
    needs: [golangci-lint, test]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Install dependencies
        run: make tidy-rides
      - name: Build docker images
        run: |
          docker build -f deployments/rides/Dockerfile -t nebengjek/rides:latest .
  push-image-rides:
    name: Push Docker Image (Rides)
    runs-on: ubuntu-latest
    needs: build-rides
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push docker image
        run: |
          docker push nebengjek/rides:latest

  build-riders:
    name: Build Docker App (Riders)
    runs-on: ubuntu-latest
    needs: [golangci-lint, test]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Install dependencies
        run: make tidy-riders
      - name: Build docker images
        run: |
          docker build -f deployments/riders/Dockerfile -t nebengjek/riders:latest .
  push-image-riders:
    name: Push Docker Image (Riders)
    runs-on: ubuntu-latest
    needs: build-riders
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push docker image
        run: |
          docker push nebengjek/riders:latest

  build-drivers:
    name: Build Docker App (Drivers)
    runs-on: ubuntu-latest
    needs: [golangci-lint, test]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Install dependencies
        run: make tidy-drivers
      - name: Build docker images
        run: |
          docker build -f deployments/drivers/Dockerfile -t nebengjek/drivers:latest .
  push-image-drivers:
    name: Push Docker Image (Drivers)
    runs-on: ubuntu-latest
    needs: build-drivers
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push docker image
        run: |
          docker push nebengjek/drivers:latest
