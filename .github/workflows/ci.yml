name: Golang Continuous Integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  golangci-lint:
    name: Lint Code
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6.1.1
        with:
          args: --timeout=10m
  test:
    name: Test with Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Install dependencies
        run: make tidy && make tidy-rides && make tidy-riders && make tidy-drivers
      - name: Run tests with coverage
        run: go test -coverprofile=coverage.out ./internal/...
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-out
          path: coverage.out
      - name: Check code coverage
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: $coverage%"
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "Code coverage below threshold!" && exit 1
          fi
  hadolint:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          recursive: true
  sonarqube:
    name: Sonarqube Checker
    runs-on: ubuntu-latest
    needs: [golangci-lint, test]
    if: github.event_name != 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Download coverage artifact
      uses: actions/download-artifact@v4
      with:
        name: coverage-out
        path: ./coverage
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v3.0.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.go.coverage.reportPaths=coverage/coverage.out
