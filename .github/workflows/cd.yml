name: Staging Continuous Delivery

on:
  workflow_dispatch:
    inputs:
      service_name:
        description: 'Service to be deployed (rides, drivers, riders, location)'
        required: true
        default: 'rides'

jobs:
  check-ci:
    name: Check CI Result
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check CI
        id: check_status
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          previous_run_status=$(gh run list --workflow="Golang Continuous Integration" --limit=1 --json conclusion -q '.[0].conclusion')
          echo "Continuous Integration conclusion: $previous_run_status"

          if [[ "$previous_run_status" != "success" ]]; then
            echo "Continuous Integration did not succeed or unfinished yetðŸ˜­. Aborting."
            exit 1
          else
            echo "Continuous Integration succeededðŸ’—. Continuing..."
          fi
  build-image:
    name: Build and Push Docker Image
    needs: check-ci
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate service name
        env:
          SERVICE_NAME: ${{ github.event.inputs.service_name }}
        run: |
          if [[ ${SERVICE_NAME} != "rides" && \
                ${SERVICE_NAME} != "riders" && \
                ${SERVICE_NAME} != "location" && \
                ${SERVICE_NAME} != "drivers" ]]; then
            echo "Invalid service name specified: ${SERVICE_NAME}"
            exit 1
          fi
          echo "Building service: ${SERVICE_NAME}"
      - uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Install dependencies
        env:
          SERVICE_NAME: ${{ github.event.inputs.service_name }}
        run: make tidy-${SERVICE_NAME}
      - name: Build docker image
        env:
          SERVICE_NAME: ${{ github.event.inputs.service_name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f deployments/${SERVICE_NAME}/Dockerfile -t ermasavior/nebengjek-${SERVICE_NAME}:${IMAGE_TAG} .
      - name: Push docker image
        env:
          SERVICE_NAME: ${{ github.event.inputs.service_name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push ermasavior/nebengjek-${SERVICE_NAME}:${IMAGE_TAG}
  deploy:
    name: Deploy to EC2
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2 
      - name: Build & Deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{ secrets.SSH_HOSTNAME }}
          USERNAME: ${{ secrets.SSH_USERNAME }}
          SERVICE_NAME: ${{ github.event.inputs.service_name }}
          IMAGE_TAG: ${{ github.sha }}
      
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOSTNAME} "
            export IMAGE_TAG=${IMAGE_TAG} &&
            cd ~/apps &&
            docker compose pull ${SERVICE_NAME}-service &&
            docker compose up -d --no-deps ${SERVICE_NAME}-service
          "
